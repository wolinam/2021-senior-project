C = cell(14,1);
M = magic(3);
%clear all

% 셀의 1번째 요소 : 함수를 이용하여 clown을 가로로 2개 붙여놓은 그림을 표시함.
load clown;
C{1,1} = fun_nar0(X);
image_cell = C{1,1};
imshow(image_cell,[]);

% 2번째 요소 : 마방진에서 2보다 값이 큰 처음 4개 원소의 인덱스
C{2,1} = find(M>2,4); 

% 3번째 요소 : 마방진에서 2보다 값이 큰 처음 4개의 원소_위의 두 번째 셀 find를 이용하여 출력
C{3,1} = M(C{2,1}); %해당 인덱스의 원소

% 4번째 요소 : 마방진의 max값 1x3
C{4,1} = max(M);

% 5번째 요소 : 마방진의 각 열의 평균값 1x3
C{5,1} = mean(M);
%mean(M(:)) %스칼라

% 6번째 요소 : 마방진 정렬_같은 열 안에서 정렬됨.
C{6,1} = sort(M);

% 7번째 요소 : 마방진의 row size, col size가 1x2행렬 안에 저장됨
C{7,1} = size(M); %3x3

% 8번째 요소 : 마방진의 요소의 갯수 = 9
C{8,1} = numel(M);

% 9번째 요소 : 마방진에서 4보다 작거나 같은 요소는 1, 4보다 크면 0을 갖는 3x3 행렬.
% 관계연산자 >와 논리연산자 not 사용
C{9,1} = ~(M>4);

% 10번째 요소 : 마방진의 (2,3)요소의 값이 7이면 1. 아니면 0의 값을 갖음
C{10,1} = (M(2,3)==7);

% 11번째 요소 : 마방진과 단위행렬 and 연산. 3x3 행렬
C{11,1} = M & eye(3);

% 12번째 요소 : 마방진과 단위행렬 or 연산. 3x3 행렬
C{12,1} = M|eye(3);

% 13번째 요소 : 마방진과 랜덤행렬의 원소가 각각 같으면 1, 아니면 0을 갖는 3x3 행렬
C{13,1} = M==(reshape(randperm(9),3,3));

% 14번째 요소 : M(2,2)>2 이거나 랜덤값<3이면 1, 둘 다 아니면 0의 값을 갖음
C{14,1} = (M(2,2)>2)||(randperm(9)<3);